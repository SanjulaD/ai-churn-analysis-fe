name: 🐳 Docker CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_NAME: ai-churn-analysis-dashboard

jobs:
  build:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4.2.2

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔐 Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: 🐳 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🛡️ Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

  deploy:
    name: 🚀 Deploy to Azure VM
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 🚀 Deploy to Azure VM
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            echo "🔐 Logging into Azure Container Registry on VM..."
            echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} --username ${{ secrets.ACR_USERNAME }} --password-stdin

            echo "⬇️ Pulling latest Docker image..."
            docker pull ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

            echo "🛑 Stopping old container if exists..."
            docker stop churnanalysis-dashboard-container || true
            docker rm churnanalysis-dashboard-container || true

            echo "▶️ Running new container with health checks..."
            docker run -d --name churnanalysis-dashboard-container \
              -p 3000:3000 \
              --restart unless-stopped \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              --health-start-period=40s \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest


            echo "⏳ Waiting for container to be healthy..."
            timeout 120 bash -c 'until docker inspect --format="{{.State.Health.Status}}" churnanalysis-dashboard-container | grep -q "healthy"; do sleep 5; done'

            echo "✅ Deployment completed successfully!"
            docker ps --filter name=churnanalysis-dashboard-container
